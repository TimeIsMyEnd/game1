import math
import numpy as np
import csv
import os
os.chdir(r'C:\Users\TimeI\Desktop\new borad1')
s0=np.load("playercolor_steps_win.npy")
color=s0[0]
steps=int(s0[1])
l=int(s0[2])
os.chdir(r'C:\Users\TimeI\Desktop\new borad1')
history_0=np.load("history_0.npy")
history_1=np.load("history_1.npy")
history_2=np.load("history_2.npy")
history_3=np.load("history_3.npy")
history_4=np.load("history_4.npy")
history_5=np.load("history_5.npy")
mat_2=np.load("mat_2.npy")
np.save("mat_2d.npy",mat_2)
mat_1=np.load("mat_1.npy")
np.save("mat_1d.npy",mat_1)
ker_3_1=np.load("ker_3_1.npy")
np.save("ker_3_1d.npy",ker_3_1)
ker_3_2=np.load("ker_3_2.npy")
np.save("ker_3_2d.npy",ker_3_2)
ker_3_3=np.load("ker_3_3.npy")
np.save("ker_3_3d.npy",ker_3_3)
ker_1=np.load("ker_1.npy")
np.save("ker_1d.npy",ker_1)
bias=np.load("bias.npy")
biasd=np.zeros([343],np.float32)
for i in np.linspace(0,342,343):
    biasd[int(i)]=bias[int(i)]
np.save("biasd.npy",biasd)
k=1
if color=='o':
    k=k*(-1)
for i in np.linspace(0,steps-1,steps):
    if k==1:
        os.chdir(r'C:\Users\TimeI\Desktop\new borad1')
        np.save("bg_0.npy",history_0[int(i)][0])
        y=[]
        for j in [0,1,2,3,4,5,6,7,8,9,10,11,12]:
            for m in [0,1,2,3,4,5,6,7,8,9,10,11,12]:
                y.append(history_0[int(i)][1][j][m])
        np.save("y.npy",y)
        os.chdir(r'C:\Users\TimeI\Desktop\new borad1\dist')
        os.system("net00.exe")
        os.system("learn.exe")
        os.chdir(r'C:\Users\TimeI\Desktop\new borad1')
        mat_2d=np.load("mat_2d.npy")
        mat_2c=np.load("mat_2c.npy")
        np.save("mat_2d.npy",mat_2d+mat_2c*(-1)*l)
        mat_1d=np.load("mat_1d.npy")
        mat_1c=np.load("mat_1c.npy")
        np.save("mat_1d.npy",mat_1d+mat_1c*(-1)*l)
        ker_3_1d=np.load("ker_3_1d.npy")
        ker_3_1c=np.load("ker_3_1c.npy")
        np.save("ker_3_1d.npy",ker_3_1d+ker_3_1c*(-1)*l)
        ker_3_2d=np.load("ker_3_2d.npy")
        ker_3_2c=np.load("ker_3_2c.npy")
        np.save("ker_3_2d.npy",ker_3_2d+ker_3_2c*(-1)*l)
        ker_3_3d=np.load("ker_3_3d.npy")
        ker_3_3c=np.load("ker_3_3c.npy")
        np.save("ker_3_3d.npy",ker_3_3+ker_3_3c*(-1)*l)
        ker_1d=np.load("ker_1d.npy")
        ker_1c=np.load("ker_1c.npy")
        np.save("ker_1d.npy",ker_1d+ker_1c*(-1)*l)
        biasd=np.load("biasd.npy")
        biasc=np.load("biasc.npy")
        for i in np.linspace(0,342,343):
            biasd[int(i)]=biasd[int(i)]+biasc[int(i)*(-1)*l]
        np.save("biasd.npy",biasd)
    else:
        os.chdir(r'C:\Users\TimeI\Desktop\new borad1')
        np.save("bg_0.npy",history_0[int(i)][0])
        y=[]
        for j in history_0[int(i)][1]:
            y+=j.tolist()
        np.save("y.npy",y)
        np.save("bg_1.npy",history_1[int(i)])
        np.save("bg_2.npy",history_2[int(i)])
        np.save("bg_3.npy",history_3[int(i)])
        np.save("bg_4.npy",history_4[int(i)])
        np.save("bg_5.npy",history_5[int(i)])
        os.chdir(r'C:\Users\TimeI\Desktop\new borad1\dist')
        os.system("learn.exe")
        os.chdir(r'C:\Users\TimeI\Desktop\new borad1')
        mat_2d=np.load("mat_2d.npy")
        mat_2c=np.load("mat_2c.npy")
        np.save("mat_2d.npy",mat_2d+mat_2c*l)
        mat_1d=np.load("mat_1d.npy")
        mat_1c=np.load("mat_1c.npy")
        np.save("mat_1d.npy",mat_1d+mat_1c*l)
        ker_3_1d=np.load("ker_3_1d.npy")
        ker_3_1c=np.load("ker_3_1c.npy")
        np.save("ker_3_1d.npy",ker_3_1d+ker_3_1c*l)
        ker_3_2d=np.load("ker_3_2d.npy")
        ker_3_2c=np.load("ker_3_2c.npy")
        np.save("ker_3_2d.npy",ker_3_2d+ker_3_2c*l)
        ker_3_3d=np.load("ker_3_3d.npy")
        ker_3_3c=np.load("ker_3_3c.npy")
        np.save("ker_3_3d.npy",ker_3_3+ker_3_3c*l)
        ker_1d=np.load("ker_1d.npy")
        ker_1c=np.load("ker_1c.npy")
        np.save("ker_1d.npy",ker_1d+ker_1c*l)
        biasd=np.load("biasd.npy")
        biasc=np.load("biasc.npy")
        for i in np.linspace(0,342,343):
            biasd[int(i)]=biasd[int(i)]+biasc[int(i)*l]
        np.save("biasd.npy",biasd)
    k=k*(-1)
ker_1d=np.load("ker_1d.npy")
np.save("ker_1.npy",ker_1d)
ker_3_1d=np.load("ker_3_1d.npy")
np.save("ker_3_1.npy",ker_3_1d)
ker_3_2d=np.load("ker_3_2d.npy")
np.save("ker_3_2.npy",ker_3_2d)
ker_3_3d=np.load("ker_3_3d.npy")
np.save("ker_3_3.npy",ker_3_3d)
mat_1d=np.load("mat_1d.npy")
np.save("mat_1.npy",mat_1d)
mat_2d=np.load("mat_2d.npy")
np.save("mat_2.npy",mat_2d)
biasd=np.load("biasd.npy")
np.save("bias.npy",biasd)

